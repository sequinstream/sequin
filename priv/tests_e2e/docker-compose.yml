version: '3.8'

services:
  postgres:
    build: 
      context: ../../
      dockerfile: Dockerfile.postgres
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200 -c pg_stat_statements.max=10000 -c track_activity_query_size=2048 -c wal_level=logical
    ports:
      - "127.0.0.1:5412:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sequin_test
      POSTGRES_HOST: /var/run/postgresql
    volumes:
      - sequin_e2e_postgres:/var/lib/postgresql/data
      - ./postgres:/docker-entrypoint-initdb.d/
    networks:
      - sequin-e2e
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  redis:
    image: redis:7
    ports:
      - "127.0.0.1:6319:6379"
    networks:
      - sequin-e2e
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: sequin-e2e-kafka
    ports:
      - "127.0.0.1:9012:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9012'
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - sequin_e2e_kafka:/var/lib/kafka/data
    networks:
      - sequin-e2e
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s

  sequin:
    build:
      context: ../../
      dockerfile: Dockerfile
      args:
        SELF_HOSTED: 1
        SENTRY_DSN: "https://dummy@dummy.ingest.sentry.io/123456"
    ports:
      - "127.0.0.1:7316:7376"
    environment:
      MIX_ENV: prod
      SERVER_PORT: "7376"
      PG_URL: "postgresql://postgres:postgres@postgres:5432/sequin_test"
      SECRET_KEY_BASE: sequin_test_secret_key_base_for_e2e_testing_only_do_not_use_in_production
      VAULT_KEY: 2Sig69bIpuSm2kv0VQfDekET2qy8qUZGI8v3/h3ASiY=
      KAFKA_BROKERS: kafka:29092
      REDIS_URL: redis://redis:6379
      CONFIG_FILE_PATH: /app/sequin.yml
      SEQUIN_ACCOUNT_NAME: sequin-e2e
      DATABASE_HOST: postgres
      DATABASE_NAME: sequin_test
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      KAFKA_DEMO_TOPIC: demo-topic
    volumes:
      - ./sequin.yml:/app/sequin.yml:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - sequin-e2e
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7376/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  sequin_e2e_postgres:
  sequin_e2e_kafka:

networks:
  sequin-e2e:
    driver: bridge
